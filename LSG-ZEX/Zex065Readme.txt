***************************************************************************************File      : Zex065Readme*Project   : Zex*Language  : None*Date      : 22:38:20 on 29th May 2001*Version   : 0.00*Copyright : LS*Auth      : Stu*Notes     :*****************************************************************************************Version 0.65 is the first complete project sync for a good few weeks.Installation:This version does not contain a valid SETL resource and as such you need to set thecontrols up before starting a game.To do this, boot up the game, wait for the main menu screen to appear and thenselect Setup Controls. The only useful controller will be the keyboard, it is not possibleto control Zex with a mouse.Suggested keyboard settings are:Thrust Up .Thrust Down ,Roll Left NUMERIC PAD 4Roll Right NUMERIC PAD 6Pitch UP NUMERIC PAD 2Pitch Down NUMERIC PAD 8Yaw Left NUMERIC PAD 0Yaw Right NUMERIC PAD .Vertical Thrust NUMERIC PAD 5Vertical Reverse Thrust NUMERIC PAD /Cannon SPACE [not implemented]Laser L [partially implemented]Missile M [Not implemented]Retro Thrust [Not implemented - possibly to be deleted]Missile Pylon Select P [Not implemented]Radar Range Toggle RRequest Mothership To Dock D [Not implemented]Eject E [Not implemented]Engine Control V (Switches on linear dampers relative to targetted object)Target T - position object in sights and press T to target it.Time Multiplier Increase X [Do not exceed 200 due to a bug?]Time Multiplier Decrease ZAutoPilot A - toggles between Off, Sterring info and Transport.Command and Control K [Not implemented]Galactic Map G SHow Ship Status Screen / [Do not use - will cause a call to debugger]Pause Game F1Music Volume Up ]Music Volume Down [Sound Volume Up =Sound VOlume Down -Console ESCIn the test environment the autopilot is next to useless. However, it can be tested by targetting an object [T], then flying about 100Km's away then press A twice.The console is activated and deactivated with the ESC key. After bringing the console down,typing help <RETURN> will display the top level help index.Some useful immediate commands are:bye         - quit the game immediately.anvil       - switch to anvilfinder      - switch to finderfuel OFF    - You will consume no fuel.hud OFF     - switch the hud off.fr          - freeze time-fr         - unfreeze timedir         - show list of Coffee files found in W folder.game        - play a simple gamemenu        - bring up a simple menu systemedit        - bring up the on-line editorhelp        - brings up the on-line helphelp intro  - display an overview of CoffeeQuick Coffee primer. Type:5 2 MOD .Coffee implements a large subset of ANSI Standard Forth.Loading Objects Into The Test Environment-----------------------------------------The test environment requires Zex is build with TEST_SYSTEM defined to 1 in3d_structures_def.h.The test environment removes all planet generation, orbitting calculations, backgroundgraphics and various other non-essential objects to provide a known state for testingcontrollers etc.Zex runs from a rigid directory structure defined as:ZD3_test : Init - initialisation filesZD3_test : L - initial scene setupZD3_test : O - object filesZD3_test : R - game resourcesZD3_test : T - game texturesZD3_test : W - Coffee filesThe test environment loads objects found in the ZD3_test : L : 01.zlv file.This file contains a series of commands that instruct Zex what objects to loadand where to display them.The file consists of a series of commands. One command per line. A command is commentedout with four splats '****'.Two commands are needed to load and display an object, RFIL and LMONRFIL <filename>,<ID>, <Static slot>, <collision detection flag>, <texture id>filename    - the name of the file to load from the 'O' folder.ID          - four alphanumeric characters used as a unique id for this objectStatic slot - which slot in the static OCB's to compile the object into.Collision detection flag - 0 or 1, this option is ignored in the test environment.testure id  - if this is a raw meshworks object then the texture id. Must be 0000 for              3dmf files              RFIL reads an object file and compiles it into the internal Zex format. Objects are loaded into what are known as the static OCB's (Object Control Block). When running thegame can take objects from the static OCB's and load it into the runtime OCB's, referred toas the dynamic OCB's. Various functions exist for finding and loading objects from the staticOCB's, typically by the ID assigned in the RFIL command.Now the object is loaded we can issue a command to load it into the dynamic OCB's:LMON ID, worldx, worldy, worldz, Deltax, Deltay, Deltaz, DeltaRotx, DeltaRoty, DeltaRotz,     controllerValue1, controllerValue2, controllerValue3, controllerRef, shields, mass,      class and a bunch of other params that are irrelevent as they are about to get      changed :)       Typically it's easiest to just copy an existing LMON command and edit it!Camera position in the test environment is set with the SCRD command:SCRD worldx,worldy,worldzFinally, the file should end with a ZEOF command. 