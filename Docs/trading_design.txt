Definitions:commodity - an item of trade; gems, sheep, firearms etc.ships item - a ship fittment; lasers, missiles, shields etc.All the trading code is held in one file (unfortunately) buy.cThe functions in this file interface with the SDS data loaded from the players object that has docked into a ZObjectControl structure (see 3d_structures_def.h) called player_kit held in sds.cbuy.c runs two types of trading systems:1. Commodities2. Ships items.The ZObjectControl data contains the ships items currently available to the player along with the cargo holdmember cargo_bay buy.c therefore handles two separate data sets:1. The commodities which are defined in a resource CITM 128 in zex22.rsrc (a resourcerer file, Resedit will complain about the template not matching)2. The ships items which are defined at the top of buy.c along with the strings in the str# resource,128 is short description, 129 is long description.For buy.c to work properly it needs to know a few things about the mothership the player has docked at.1. The allegiance of the mothership. If an alien mothership then it's likely alien items will be more abundantand cheaper and the same for human.2. The supply rating of the mothership - internal mship_supply_rating. A mothership far away from any planets has a lower supply rating thanone directly orbiting a planet. This value is scaled 0 to 100 inclusive.3. The mothership supply type - internal mship_supply_type. This is scaled 1 to 10 where 1-5 is an agriculturalbase for the mothership where 1 is poor agri, 5 is rich agri. 6 to 10 means a tech base where 6 is poor tech, 10 is rich tech.4. Not directly related to the the mothership, but buy.c also takes into account the difficulty level the playerhas selected. An easier level means easier trading for the player.When the game initialises, the above mentioned resources are loaded into memory; for commodities the CITM resourceis loaded into the commodity array.The commodity array is an array of hold_desc items. hold_desc is declared in buy.h and looks like:typedef struct{char string [0x24]; //Name of itemshort dofq;	//1=tonnes, 4=grammes	short _class;	//10-ores, 11-food, 12-tech, 13-luxury/textiles, 14-firearms - see buy.hshort base_price_human; //base price on a human mothershipshort base_price_alien; //base price on an alien motehrshipshort transport_risk;   //how dangerous the cargo is to carry; livestock and explosives are dangerous for e.g.short pirate_risk;   //how interested pirates should be in this cargo (should they know about its transport)short MFR; //manufacturer: 1=human, 2=alien, 3=bothshort markup; //how much the item is typically marked up as a percentageshort stock; //how much is in stockshort buy_price;  //current buying price (from player)short sell_price;	//current selling price (to player)short id;	//serial number (index - 0 based)} hold_desc;From the above data buy dynamically calculates what a commodity should sell and buy for. The calculations are eventdriven; if an item is traded, the price is recalculated. See simulated other buyers below.Commodity classes-----------------Currently defined as:ORES 10FOOD 11TECH 12LUXURY 13FIREARMS 14DRINKS 15LIVESTOCK 16Buying a commodity------------------Items are always sold in their dofq. Currently there is no way of buying more than 1 of an item. Trading computerswill lower the price of an item being bought, and in some cases (i.e. trading ships items) will allow haggling with theseller. Commodity buying is more automated and does not allow haggling; the price you see from the trade computeris the best it could achieve,When an commodity is bought, it is placed in the ships hold. The SDS data defines how big a ships hold is, but a maximumof 32 items is currently in force. Basically we look for an empty slot in the player_kit.cargo_bay member and shove the item id in. Empty cargo hold slots are marked with -1.Selling involves displaying the inventory, clicking an item and then sell. The item is removed from player_kit.cargo_bay and added to the commodity_arraySimulated other buyers----------------------run_commodities() is responsible for simulating other traders whilst the player is connected to the trading system.run_commodities needs to know how many alien and human ships are docked at the mothership.run_commodities relies on the higher level mothership controller to pass data to the POBS system so it canget this data from POBS.Required POBS calls for trading-------------------------------int get_number_of_ships_docked(int allegiance, int mship_unique_id);int get_mothership_allegiance(int mship_unique_id); //returns HUMAN, ALIEN, NEUTRALint get_mothership_supply_rating(int mship_unique_id); //0-100int get_mothership_supply_type(int mship_unique_id); //1-5=agri, 6-10=tech